from pico2d import*


'''
이 py파일은 필기용 / 점검용의 용도를 가지고 있음.


#################################################################################

**게임의 정의
가상 세계(게임 세계) 안에서 존재하는 여러 객체들 간의 상호작용(로직)을 시뮬레이션(렌더링)한 것.

#################################################################################

**게임의 구성 요소
배경
캐릭터
UI (Graphic User Interface)
AI 인공지능
사운드

#################################################################################

**객체의 정의
객체의 속성(객체의 원소값) + 객체의 행위(원소값의 변화식)

객체의 속성 = 객체의 현재 상태 (= state, attributes)
객체의 행위 = 시간값에 비례하는 상태 변화식 (= behavior, operation, method)

객체의 본질 = 객체의 종류 (객체의 종류에 따라 그 속성들이 달라진다.)

Attributes && Operations

#################################################################################

**객체지향 언어와 코딩
객체지향적이다. = class의 등장

**클래스?
공통 데이터(변수)와 그 데이터로 수행되는 함수들을 정의하는 소프트웨어 단위.

클래스로 각각의 객체 생성(Object instantiation) => 인스턴스(instance)

#################################################################################

**Python Module
python은 script 언어. (한 줄 실 행) 
python module -> 정의(Definition) 와 문장(Statement)의 집합
py file 그 자체로 실행 가능 ++ 다른 module 에서 import하면 그 자체가 객체가 된다. (싱글톤 객체)

import냐 py 개별 실행이냐에 따른 __name__ 활용한 main 실행 여부!

#################################################################################

**게임 기본 구조
초기화(initialization)

<게임 루프(반복)>
게임 로직(Logic) 검사 = 게임 세계의 논리/법칙 적용
렌더링(Rendering, Drawing) = 게임 세계 구현

종료(Termination)

#################################################################################

**게임 프로그램?
-> 게임의 상태(모드, 씬; Scene)의 집합

#################################################################################

**상태 전환 :: stack 자료 구조 (땅에 묻힌 김치독과 김치들을 상상해라 )
push 이전의 상태 유지하며 다음 상태 진입
pop 이전 상태 호출
change 이전 상태를 다음 상태로 덮어씌우며 진입

#################################################################################

**클래스 변수
클래스에 의해 생성된 모든 객체들이 공유하는 변수
-> 클래스 안에서 정의한 변수. (!) def 정의문 안에서의 변수는 지역변수 같다. 주의하자. 

self.변수 가 아니라

ClassName.변수 로 함.

#################################################################################

'''



####### 게임 상태 뼈대 ##########

def enter(): #Scene 진입
    pass
def exit(): #Scene 탈출
    pass
def draw(): #Scene Draw
    pass
def update(): #Scene Update
    pass
def pause(): #Scene Pause
    pass
def resume(): #Scene Resume
    pass
def handle_events():
    global running
    events = get_events()
    for event in events:
        if event.type == SDL_KEYDOWN:
            if event.key == SDL_QUIT:
                running = False
            elif event.key == SDLK_ESCAPE:
                running = False

        else:
            pass

########## 해당 Scene에서의 월드 구현 ###########

def Create_World(): #게임세계 창조 :: 객체 정의
    pass
def Destroy_World(): #게임세계 파괴 :: 컴퓨터 자원 해제
    pass

################초기화#########################


running = True


###################### 게임 루프 ###########################

while (running):

    handle_events()

    clear_canvas()
    update_canvas()


